from aiogram import Router, F
from aiogram.types import (
    Message,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from aiogram.fsm.context import FSMContext
from app.states.support import SupportStates

router = Router()
SUPPORT_CHAT_ID = -4837484525  # ID –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
@router.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: Message, state: FSMContext):
    await message.answer(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ.\n–û–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(SupportStates.waiting_message)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(SupportStates.waiting_message)
async def forward_to_support(message: Message, state: FSMContext):
    await state.clear()

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ "üì© –û–¢–í–ï–¢–ò–¢–¨"
    answer_btn = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì© –û–¢–í–ï–¢–ò–¢–¨", callback_data=f"answer_to_{message.from_user.id}")]
        ]
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìç –ú–µ–Ω—é", callback_data="back_to_menu")]
            ]
        )
    )

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    text = (
        f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>@{message.from_user.username or '–±–µ–∑ username'}</b>\n"
        f"ID: <code>{message.from_user.id}</code>\n\n"
        f"{message.text}"
    )
    await message.bot.send_message(
        chat_id=SUPPORT_CHAT_ID,
        text=text,
        reply_markup=answer_btn,
        parse_mode="HTML"
    )


# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üì© –û–¢–í–ï–¢–ò–¢–¨" –≤ –≥—Ä—É–ø–ø–µ
@router.callback_query(F.data.startswith("answer_to_"))
async def handle_reply_button(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    await state.set_state(SupportStates.waiting_reply)
    await state.update_data(reply_to=user_id)

    await callback.message.answer(
        f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>",
        parse_mode="HTML"
    )
    await callback.answer()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞ ‚Üí –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.message(SupportStates.waiting_reply)
async def send_reply_to_user(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("reply_to")
    await state.clear()

    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}"
        )
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")


# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ –∫–Ω–æ–ø–∫–µ
@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    from app.keyboards.reply import main_menu
    await callback.message.answer("üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)
    await callback.answer()
