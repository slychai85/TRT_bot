from aiogram import Router, F, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, desc, func, and_
from app.database.models import User
from app.database.session import async_session
from datetime import datetime, timedelta

router = Router()

TOP_LIMIT = 30  # –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

# --- –ö–Ω–æ–ø–∫–∏ ---
def get_top_keyboard(current_view: str):
    builder = InlineKeyboardBuilder()
    if current_view == "all":
        builder.button(text="–õ—É—á—à–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="top_week")
    else:
        builder.button(text="–û–±—â–∏–π –¢–û–ü", callback_data="top_all")
    return builder.as_markup()


# --- –ö–æ–º–∞–Ω–¥–∞ –¢–û–ü ---
@router.message(F.text == "üèÜ –¢–æ–ø –ª—É—á—à–∏—Ö")
async def show_top(message: Message):
    await send_top(message, view="all")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ---
@router.callback_query(F.data == "top_week")
async def top_week_callback(call: CallbackQuery):
    await call.answer()
    await send_top(call.message, view="week", user_id=call.from_user.id)

@router.callback_query(F.data == "top_all")
async def top_all_callback(call: CallbackQuery):
    await call.answer()
    await send_top(call.message, view="all", user_id=call.from_user.id)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¢–û–ü–∞ ---
async def send_top(message: Message, view: str = "all", user_id: int = None):
    async with async_session() as session:
        stmt = select(User)

        if view == "week":
            one_week_ago = datetime.utcnow() - timedelta(days=7)
            stmt = stmt.where(User.joined_at >= one_week_ago)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª–µ joined_at

        stmt = stmt.order_by(desc(User.referrals_count))
        result = await session.execute(stmt)
        users = result.scalars().all()

        top_users = users[:TOP_LIMIT]
        user_map = {user.telegram_id: user for user in users}

        lines = ["<b>üèÜ –¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:</b>\n"]

        current_user = user_map.get(user_id or message.from_user.id)
        current_in_top = False

        for i, user in enumerate(top_users, 1):
            name = user.full_name or user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            line = f"{i}. {name} ‚Äî {user.referrals_count}"

            if user.telegram_id == (user_id or message.from_user.id):
                line += " ‚úÖ"  # –≥–∞–ª–æ—á–∫–∞
                current_in_top = True
            lines.append(line)

        if not current_in_top and current_user:
            # –ù–∞–π–¥—ë–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for index, user in enumerate(users, 1):
                if user.telegram_id == current_user.telegram_id:
                    lines.append("...\n<b>–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b>")
                    name = current_user.full_name or current_user.username or "–í—ã"
                    lines.append(f"{index}. {name} ‚Äî {current_user.referrals_count} ‚úÖ")
                    break

        await message.answer("\n".join(lines), reply_markup=get_top_keyboard(view))
