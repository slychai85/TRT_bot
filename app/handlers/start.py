from aiogram import Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.methods import GetChatMember
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from random import randint
from app.keyboards.reply import main_menu
from app.database.models import User
from app.database.session import async_session
from sqlalchemy import select, update
from datetime import datetime

router = Router()
MAIN_CHANNEL = "@TRT_support_bot"


class StartState(StatesGroup):
    awaiting_captcha = State()


# /start ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
@router.message(F.text.startswith("/start"))
async def start_handler(message: Message, state: FSMContext):
    referral_id = None
    parts = message.text.split()
    if len(parts) == 2 and parts[1].isdigit():
        referral_id = int(parts[1])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    chat_member = await message.bot(GetChatMember(chat_id=MAIN_CHANNEL, user_id=message.from_user.id))
    if chat_member.status not in ("member", "administrator", "creator"):
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")]],
            resize_keyboard=True
        )
        await message.answer(
            "‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∫–∞–Ω–∞–ª—É: @TRT_support_bot\n\n"
            "–¢–æ–ª—å–∫–æ —Ç–∞–∫ —Ç—ã –±—É–¥–µ—à—å –≤ –∫—É—Ä—Å–µ –ø–ª–∞–Ω–æ–≤ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è. –ë–µ–∑ —ç—Ç–æ–π —Å–≤—è–∑–∏ —Ç—ã ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç—É—Ä–∏—Å—Ç.",
            reply_markup=kb
        )
        return

    # –ö–∞–ø—á–∞
    a, b = randint(1, 9), randint(1, 9)
    await state.update_data(captcha=a + b, referral_id=referral_id)
    await state.set_state(StartState.awaiting_captcha)
    await message.answer(f"üß† –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç, —Ä–µ—à–∏ –ø—Ä–∏–º–µ—Ä:\n\n<b>{a} + {b}</b> = ?")


# –û—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É
@router.message(StartState.awaiting_captcha, F.text.regexp(r"^\d+$"))
async def check_captcha(message: Message, state: FSMContext):
    data = await state.get_data()
    correct_answer = data.get("captcha")
    referral_id = data.get("referral_id")

    if int(message.text) != correct_answer:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    async with async_session() as session:
        stmt = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        if not user:
            new_user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                full_name=message.from_user.full_name,
                created_at=datetime.utcnow(),
                joined_at=datetime.utcnow()
            )
            session.add(new_user)
            await session.flush()

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID ‚Äî –æ–±–Ω–æ–≤–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
            if referral_id and referral_id != message.from_user.id:
                ref_stmt = select(User).where(User.telegram_id == referral_id)
                ref_result = await session.execute(ref_stmt)
                ref_user = ref_result.scalar_one_or_none()

                if ref_user:
                    ref_user.referrals_count += 1
                    ref_user.referrals_week += 1

        await session.commit()

    await state.clear()
    await message.answer("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!", reply_markup=main_menu)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@router.message(F.text == "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def check_subscription_again(message: Message):
    chat_member = await message.bot(GetChatMember(chat_id=MAIN_CHANNEL, user_id=message.from_user.id))
    if chat_member.status in ("member", "administrator", "creator"):
        await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–∏ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
    else:
        await message.answer("‚ùó –¢—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω. –ü–æ–¥–∫–ª—é—á–∏—Å—å: @TRT_support_bot")
