from aiogram import Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.methods import GetChatMember
from aiogram.fsm.context import FSMContext
from random import randint
from app.keyboards.reply import main_menu

router = Router()
MAIN_CHANNEL = "@TRT_support_bot"  # –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª


# /start ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞
@router.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    chat_member = await message.bot(GetChatMember(chat_id=MAIN_CHANNEL, user_id=message.from_user.id))
    if chat_member.status not in ("member", "administrator", "creator"):
        # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")]],
            resize_keyboard=True
        )
        await message.answer(
            "‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∫–∞–Ω–∞–ª—É: @TRT_support_bot\n\n"
            "–¢–æ–ª—å–∫–æ —Ç–∞–∫ —Ç—ã –±—É–¥–µ—à—å –≤ –∫—É—Ä—Å–µ –ø–ª–∞–Ω–æ–≤ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è. –ë–µ–∑ —ç—Ç–æ–π —Å–≤—è–∑–∏ —Ç—ã ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç—É—Ä–∏—Å—Ç.",
            reply_markup=kb
        )
        return

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –∏ —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω ‚Äî —Å—Ä–∞–∑—É –º–µ–Ω—é
    data = await state.get_data()
    if data.get("verified"):
        await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
        return

    # –ò–Ω–∞—á–µ ‚Äî –∫–∞–ø—á–∞
    a, b = randint(1, 9), randint(1, 9)
    await state.update_data(captcha=a + b)
    await message.answer(f"üß† –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç, —Ä–µ—à–∏ –ø—Ä–∏–º–µ—Ä:\n\n<b>{a} + {b}</b> = ?")


# –û—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É
@router.message(F.text.regexp(r"^\d+$"))
async def check_captcha(message: Message, state: FSMContext):
    data = await state.get_data()
    correct_answer = data.get("captcha")

    if correct_answer is None:
        return  # –∫–∞–ø—á–∞ –Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–∞

    if int(message.text) == correct_answer:
        # –í–µ—Ä–Ω–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥, —É–¥–∞–ª—è–µ–º –∫–∞–ø—á—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await state.update_data(verified=True, captcha=None)
        await message.answer("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!", reply_markup=main_menu)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏
@router.message(F.text == "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def check_again(message: Message):
    chat_member = await message.bot(GetChatMember(chat_id=MAIN_CHANNEL, user_id=message.from_user.id))
    if chat_member.status in ("member", "administrator", "creator"):
        await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–∏ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
    else:
        await message.answer("‚ùó –¢—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω. –ü–æ–¥–∫–ª—é—á–∏—Å—å: @TRT_support_bot")
